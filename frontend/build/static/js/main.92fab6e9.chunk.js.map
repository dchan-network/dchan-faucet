{"version":3,"sources":["assets/polygon.svg","assets/faucet.svg","assets/dchan.png","LoadButton/index.js","AppExplanations/index.js","controller/accountManager.js","controller/faucet.js","App.js","reportWebVitals.js","index.js"],"names":["LoadButton","text","loadingText","color","disabled","hidden","onClick","useState","isLoading","setLoading","onTriggerRun","useCallback","then","catch","className","style","backgroundColor","display","AppExplanations","expandedItems","setexpandedItems","allowZeroExpanded","allowMultipleExpanded","onChange","update","length","newExpandedItemUUID","itemButtonBottom","document","getElementById","getBoundingClientRect","bottom","window","innerHeight","scrollBy","children","AccountManager","this","connected","busy","web3Provider","web3","balance","network","a","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","cacheProvider","connect","request","method","params","account","console","error","Web3","eth","net","getId","log","decimals","balance_BN","utils","toBN","decimals_BN","before_comma","div","toString","after_comma","mod","padStart","formatted","getBalance","String","formatted_balance","getFormattedBalance","captcha","apiUrl","config","get","axios","response","status","data","hash","claimFaucet","set","configuration","accountManager","App","setAccount","setBalance","formattedBalance","setFormattedBalance","txLink","setTxLink","setCaptcha","setDisabled","sending","setSending","presses","setPresses","useEffect","Number","refreshBalance","parseFloat","replace","hideProgressBar","alignItems","src","polygon","alt","padding","href","target","dchan","zIndex","width","position","faucet","right","transform","toast","faucetClaim","success","message","err","e","JSON","stringify","fontSize","id","action","theme","sitekey","onVerify","token","ekey","rel","packageJson","version","h","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.92fab6e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/polygon.d46e750b.svg\";","export default __webpack_public_path__ + \"static/media/faucet.992ecb17.svg\";","export default __webpack_public_path__ + \"static/media/dchan.35747f56.png\";","import React, { useState, useCallback } from \"react\";\nimport \"./index.css\";\n\nfunction LoadButton({ text, loadingText, color, disabled, hidden, onClick }) {\n  const [isLoading, setLoading] = useState(false);\n\n  const onTriggerRun = useCallback(() => {\n    setLoading(true);\n    onClick()?.then(() => {\n      setLoading(false)\n    }).catch(() => {\n      setLoading(false)\n    }) || setLoading(false);\n  }, [onClick]);\n\n  return (\n    <button\n      className=\"BackupButton\"\n      disabled={isLoading | disabled}\n      onClick={isLoading ? null : onTriggerRun}\n      style={{\n        backgroundColor: color,\n        display: hidden ? \"none\" : true,\n      }}\n    >\n      {isLoading ? loadingText || \"Loadingâ€¦\" : text}\n    </button>\n  );\n}\n\nexport default LoadButton;","import React, { useState } from \"react\";\n\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from \"react-accessible-accordion\";\nimport ReactMarkdown from \"react-markdown\";\nimport \"./index.css\";\n\nexport default function AppExplanations() {\n  const [expandedItems, setexpandedItems] = useState([]);\n\n  // In case the user expands a node that is barely visible, we scroll the page to display it fully\n  function handleExpand(update) {\n    if (update.length > expandedItems.length) {\n      const newExpandedItemUUID = update[update.length - 1];\n      const itemButtonBottom = document\n        .getElementById(`accordion__panel-${newExpandedItemUUID}`)\n        .getBoundingClientRect().bottom;\n      if (itemButtonBottom > window.innerHeight) {\n        window.scrollBy(0, itemButtonBottom - window.innerHeight);\n      }\n    }\n    setexpandedItems(update);\n  }\n\n  const whatIsAFaucet_help =\n    // eslint-disable-next-line\n    \"A `Faucet` is a tool that provides a small amount of funds to start using a dapp without having to buy cryptocurrency. \\n\\\n    This faucet provides just enough MATIC to allow users to post on [dchan.network](https://dchan.network).\";\n\n\n  const howMuchCanIGet_help =\n    // eslint-disable-next-line\n    \"Plenty enough!  \\n\\\n    Transactions on Polygon network are dirt cheap. We're talking about fractions of a cent for most transactions.  \\n\\\n    So this faucet will only send you `0.001 MATIC` - enough to send a couple posts on [dchan.network](https://dchan.network). \\n\\\n    Feel free to send some spare change at `0xa3b832e52bc12df5a5eeb885370bc9b54d19bc1a` to replenish the faucet once you made it. ðŸ˜€\";\n\n  const howToEarnMoreMatic_help =\n    \"* First bring your assets from Ethereum to Polygon through [the bridge](https://wallet.matic.network/bridge/)  \\n\\\n    Then there's a variety of things you can do:  \\n\\\n    * Swapping assets on [QuickSwap](https://quickswap.exchange/) or [ComethSwap](https://swap.cometh.io/#/swap), the equivalents of `Uniswap` on Polygon  \\n\\\n    [Paraswap](https://paraswap.io/#/?network=polygon) is also available and will route your swaps through the cheapest path.  \\n\\\n    * Depositing your assets on [Aave](https://app.aave.com/dashboard) or [Curve](https://polygon.curve.fi/) to farm some fresh MATIC  \\n\\\n    * Now you'll get free MATIC to shitpost as much as you want, without having to buy them ever again! \\n\\\n    \";\n\n  return (\n    <Accordion allowZeroExpanded allowMultipleExpanded onChange={handleExpand}>\n       <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>What is a Faucet ?</AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={whatIsAFaucet_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>How much can I get ?</AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={howMuchCanIGet_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>\n            How to earn (much) more MATIC ?\n          </AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={howToEarnMoreMatic_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}","import Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst MATIC_NETWORK = 137;\n\nclass AccountManager {\n  constructor() {\n    this.connected = false;\n    this.busy = false;\n    this.web3Provider = null;\n    this.web3 = null;\n    this.balance = 0;\n    this.network = 0;\n  }\n\n  async connect() {\n    if (!this.connected) {\n      const providerOptions = {\n        walletconnect: {\n          package: WalletConnectProvider, // required\n          options: {\n            infuraId: \"INFURA_ID\" // required\n          }\n        }\n      };\n\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\", // optional\n        cacheProvider: true, // optional\n        providerOptions // required\n      });\n\n      this.web3Provider = await web3Modal.connect();\n      try {\n        // Request account access\n        this.account = await this.web3Provider.request({\n          method: \"eth_requestAccounts\",\n          params: [],\n        });\n      } catch (error) {\n        // User denied account access...\n        console.error(`User denied account access: ${error}`);\n      }\n      this.web3 = new Web3(this.web3Provider);\n      this.network = await this.web3.eth.net.getId();\n      if(this.network == MATIC_NETWORK){\n        this.connected = true;\n        console.log(`connected: ${this.account} ${typeof this.account}`);\n        return this.account;\n      }\n    }\n  }\n\n  getFormattedBalance(balance, decimals){\n    let balance_BN = this.web3.utils.toBN(balance);\n    let decimals_BN = this.web3.utils.toBN(10**decimals);\n    let before_comma = balance_BN.div(decimals_BN).toString();\n    let after_comma = balance_BN.mod(decimals_BN).toString();\n    after_comma = after_comma.padStart(decimals, \"0\");\n    return before_comma + \".\" + after_comma + \" MATIC\";\n  }\n\n  async getBalance(formatted = true) {\n    const decimals = 18;\n    this.balance = await this.web3.eth.getBalance(String(this.account));\n    this.formatted_balance = this.getFormattedBalance(this.balance, decimals);\n    return formatted ? this.formatted_balance : this.balance;\n  }\n\n}\n\nexport default AccountManager;\n","import axios from \"axios\";\nimport config from \"react-global-configuration\";\n\nasync function claimFaucet(account, captcha){\n    console.log(captcha)\n    let apiUrl = config.get(\"apiurl\") +\"/rpc-mainnet/matic/\" + account + \"/\" + captcha;\n    console.log(\"Sending request...\")\n    return await axios\n    .get(apiUrl)\n    .then(response => {\n        if (response.status === 200) {\n        return config.get(\"explorer\") + \"/tx/\" + response.data.hash;\n        }\n    });\n}\n\nexport default claimFaucet;","import polygon from './assets/polygon.svg';\nimport faucet from './assets/faucet.svg';\nimport dchan from './assets/dchan.png';\nimport './App.css';\nimport packageJson from \"../package.json\";\nimport LoadButton from \"./LoadButton\";\nimport AppExplanations from \"./AppExplanations\";\nimport AccountManager from \"./controller/accountManager\";\nimport faucetClaim from \"./controller/faucet\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport config from \"react-global-configuration\";\nimport configuration from './config.json';\nimport HCaptcha from '@hcaptcha/react-hcaptcha';\n\nconfig.set(configuration);\n\nconst accountManager = new AccountManager();\n\nfunction App() {\n  const [account, setAccount] = useState(\"Not connected\");\n  const [balance, setBalance] = useState(0);\n  const [formattedBalance, setFormattedBalance] = useState(\"\");\n  const [txLink, setTxLink] = useState(\"\");\n  const [captcha, setCaptcha] = useState(\"\");\n  const [disabled, setDisabled] = useState(false)\n  const [sending, setSending] = useState(false)\n  const [presses, setPresses] = useState(0)\n\n  useEffect(() => {\n    setDisabled(sending || Number(balance) >= config.get(\"maxAmount\") || captcha === \"\")\n  }, [balance, captcha, sending])\n\n  const refreshBalance = useCallback(() => {\n    accountManager.getBalance().then((balance) => { \n      setBalance(parseFloat(balance.replace(/[^0-9]/g, \"\")))\n      setFormattedBalance(balance)\n    });\n  })\n  \n  return (\n    <div className=\"App\">\n      <ToastContainer hideProgressBar={true} />\n      <div className=\"App-banner\">\n        <div className=\"App-title\" style={{display: \"flex\", alignItems: \"center\"}}><img src={polygon} className=\"App-polygon\" alt=\"polygon\"  /> Polygon Faucet</div>\n        <div className=\"App-subtitle\" style={{display: \"flex\", alignItems: \"center\", padding: \"2rem\"}}>@<a href=\"//dchan.network\" target=\"_blank\">dchan.network</a><img src={dchan} className=\"App-dchan\" alt=\"dchan\" style={{zIndex: -1, width: \"4rem\"}} /></div>\n      </div>\n      <header className=\"App-header\">\n        <div className=\"Commands\" style={{position: \"relative\"}}>\n          <img src={faucet} className=\"App-faucet\" alt=\"faucet\" style={{position: \"absolute\", right: \"0px\", bottom: \"0px\", width: \"8rem\", transform: \"translate(100%, 0%) scale(-1, 1)\"}} />\n          <LoadButton\n            text=\"Connect\"\n            loadingText=\"Loading...\"\n            color=\"#8248e5\"\n            hidden={account !== \"Not connected\"}\n            onClick={() => accountManager.connect().then((account) => {\n              if (!account) {\n                toast.error(`Wrong network: Please select Matic/Polygon network first`)\n              }\n              else {\n                setAccount(account);\n                refreshBalance()\n              }\n            })}\n          />\n          <LoadButton\n            text={Number(balance) >= config.get(\"maxAmount\") ? \"Balance too high\" : \"Receive\"}\n            loadingText=\"Sending...\"\n            color=\"#8248e5\"\n            disabled={disabled}\n            hidden={account === \"Not connected\"}\n            onClick={() => {\n              setPresses(presses + 1)\n              setSending(true)\n              try {\n                faucetClaim(account, captcha)\n                .then((hash) => {\n                  toast.success(\"Transaction sent!\");\n                  setTxLink(hash);\n                  setCaptcha(\"\");\n                  setSending(false)\n                })\n                .catch((error) => {\n                  console.error({error})\n                  toast.error(`ðŸ˜• ${error.message || error.response.data.err.message}`)\n                  setSending(false)\n                })\n              } catch(e) {\n                toast.error(`Error: ${JSON.stringify(e)}`)\n                setSending(false)\n              }\n            }}\n          />\n        </div>\n        <div>{presses > 10 ? <span style={{\n          fontSize: `${1+presses*0.001}rem`\n        }}>Presses: {presses}</span> : \"\"}</div>\n        <form id=\"receive\" action=\"\" method=\"POST\">\n          <HCaptcha\n            theme=\"dark\"\n            sitekey={config.get(\"hcaptchasitekey\")}\n            onVerify={(token, ekey) => { setCaptcha(token) }}\n          />\n        </form>\n        <p hidden={account === \"Not connected\"}>{account}</p>\n        <p hidden={account === \"Not connected\"}>{\"Your balance: \" + String(formattedBalance)}</p>\n        <a hidden={txLink === \"\"} target=\"_blank\" rel=\"noopener noreferrer\" href={txLink}>{txLink}</a>\n        <br></br>\n        <AppExplanations></AppExplanations>\n        <div className=\"App-footer\">\n          <p>\n            Credits to <a href=\"https://github.com/TamtamHero/polygon-faucet/\" target=\"_blank\" rel=\"noopener noreferrer\">TamtamHero</a> for the Web App. v\n            {`${packageJson.version}`}.{\" \"}\n          </p>\n          <p>\n            Polygon donation: <a h href=\"https://polygonscan.com/address/0xa3b832e52bc12df5a5eeb885370bc9b54d19bc1a/transactions\" target=\"_blanc\" rel=\"noopener noreferrer\">0xa3b832e52bc12df5a5eeb885370bc9b54d19bc1a</a>\n          </p>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}